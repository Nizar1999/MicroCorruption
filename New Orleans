Reading the manual for this problem, i directed my attention towards this part:

    There is  no default password  on the LockIT  Pro---upon receiving
    the LockIT Pro, a new password must be set by connecting it to the
    LockIT Pro  App and  entering a password  when prompted,  and then
    restarting the LockIT Pro using the red button on the back.

I will assume for the time being that the password being entered will be stored somewhere then loaded into memory when the LockIT Pro is restarted.

The 3 first functions all seemed normal.

440e <__do_copy_data>
440e:  3f40 0000      clr	r15
4412:  0f93           tst	r15
4414:  0724           jz	#0x4424 <__do_clear_bss+0x0>
4416:  8245 5c01      mov	r5, &0x015c
441a:  2f83           decd	r15
441c:  9f4f c245 0024 mov	0x45c2(r15), 0x2400(r15)
4422:  f923           jnz	#0x4416 <__do_copy_data+0x8>

In this function however, we cleared r15 and called <__do_clear_bss+0x0>.

4424 <__do_clear_bss>
4424:  3f40 0800      mov	#0x8, r15
4428:  0f93           tst	r15
442a:  0624           jz	#0x4438 <main+0x0>
442c:  8245 5c01      mov	r5, &0x015c
4430:  1f83           dec	r15
4432:  cf43 0024      mov.b	#0x0, 0x2400(r15)
4436:  fa23           jnz	#0x442c <__do_clear_bss+0x8>

Which moves 0x8 into r15 and then proceeds to loop from 4436 to 442c while using r15 as a counter and nulling the next 8 bytes beginning from address 0x2400. It seems like we will be using this address to store something that is 8 bytes long.

4438 <main>
4438:  3150 9cff      add	#0xff9c, sp
443c:  b012 7e44      call	#0x447e <create_password>
4440:  3f40 e444      mov	#0x44e4 "Enter the password to continue", r15
4444:  b012 9445      call	#0x4594 <puts>
4448:  0f41           mov	sp, r15
444a:  b012 b244      call	#0x44b2 <get_password>
444e:  0f41           mov	sp, r15
4450:  b012 bc44      call	#0x44bc <check_password>
4454:  0f93           tst	r15
4456:  0520           jnz	#0x4462 <main+0x2a>
4458:  3f40 0345      mov	#0x4503 "Invalid password; try again.", r15
445c:  b012 9445      call	#0x4594 <puts>
4460:  063c           jmp	#0x446e <main+0x36>
4462:  3f40 2045      mov	#0x4520 "Access Granted!", r15
4466:  b012 9445      call	#0x4594 <puts>
446a:  b012 d644      call	#0x44d6 <unlock_door>
446e:  0f43           clr	r15
4470:  3150 6400      add	#0x64, sp

Upon inspection of the <main> function I noticed the <create_password> function and decided to dive in for a closer look.

447e <create_password>
447e:  3f40 0024      mov	#0x2400, r15
4482:  ff40 4b00 0000 mov.b	#0x4b, 0x0(r15)
4488:  ff40 4800 0100 mov.b	#0x48, 0x1(r15)
448e:  ff40 3f00 0200 mov.b	#0x3f, 0x2(r15)
4494:  ff40 5600 0300 mov.b	#0x56, 0x3(r15)
449a:  ff40 5200 0400 mov.b	#0x52, 0x4(r15)
44a0:  ff40 2400 0500 mov.b	#0x24, 0x5(r15)
44a6:  ff40 2400 0600 mov.b	#0x24, 0x6(r15)
44ac:  cf43 0700      mov.b	#0x0, 0x7(r15)
44b0:  3041           ret

Even though the manual mentioned the lack of a default password, it seems that there may be one after all. I see now that I may not be able to trust the manual.

What I could gather from this is that were loading an immediate address (0x2400) into r15 then moving a byte at a time (mov.b) into an offset of this address (0x0(r15), 0x1(r15) etc..).

Meaning that if I break right after this function returns, and observe the 7 bytes starting from r15. (The last byte entered in line 44ac is ignored because the MSP430 chip uses null-terminated strings).

We could also just go ahead and convert each of these bytes to decimal instead of breaking and looking at the live memory dump but im too lazy so.

I set a break point at 44b0, restarted, and upon breaking i entered "read 2400 8" into the console.

2400:   4b48 3f56 5224 2400  KH?VR$$.

Removing the . as its the terminator, and we get KH?VR$$ as the password. Door unlocked.
