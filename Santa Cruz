Overview:
- A firmware update further rejects passwords which are too long.
- This lock is attached the the LockIT Pro HSM-1.

4438 <main>
4438:  3150 ceff      add	#0xffce, sp
443c:  b012 5045      call	#0x4550 <login>

Nothing interesting.

4550 <login>
4550:  0b12           push	r11
4552:  0412           push	r4
4554:  0441           mov	sp, r4
4556:  2452           add	#0x4, r4
4558:  3150 d8ff      add	#0xffd8, sp
455c:  c443 faff      mov.b	#0x0, -0x6(r4)  ; 0
4560:  f442 e7ff      mov.b	#0x8, -0x19(r4) ; 8 (min pass size)
4564:  f440 1000 e8ff mov.b	#0x10, -0x18(r4)  ; 16 (max pass size)


Initializing some values here..


456a:  3f40 8444      mov	#0x4484 "Authentication now requires a username and password.", r15
456e:  b012 2847      call	#0x4728 <puts>
4572:  3f40 b944      mov	#0x44b9 "Remember: both are between 8 and 16 characters.", r15
4576:  b012 2847      call	#0x4728 <puts>
457a:  3f40 e944      mov	#0x44e9 "Please enter your username:", r15
457e:  b012 2847      call	#0x4728 <puts>

Not interesting.

4582:  3e40 6300      mov	#0x63, r14
4586:  3f40 0424      mov	#0x2404, r15
458a:  b012 1847      call	#0x4718 <getsn>

Reading 99 bytes into 2404

458e:  3f40 0424      mov	#0x2404, r15
4592:  b012 2847      call	#0x4728 <puts>
4596:  3e40 0424      mov	#0x2404, r14
459a:  0f44           mov	r4, r15
459c:  3f50 d6ff      add	#0xffd6, r15
45a0:  b012 5447      call	#0x4754 <strcpy>

Copies username into 43a2 (revealed by a break)

45a4:  3f40 0545      mov	#0x4505 "Please enter your password:", r15
45a8:  b012 2847      call	#0x4728 <puts>
45ac:  3e40 6300      mov	#0x63, r14
45b0:  3f40 0424      mov	#0x2404, r15
45b4:  b012 1847      call	#0x4718 <getsn>

Reading 99 bytes into 2404

45b8:  3f40 0424      mov	#0x2404, r15
45bc:  b012 2847      call	#0x4728 <puts>
45c0:  0b44           mov	r4, r11
45c2:  3b50 e9ff      add	#0xffe9, r11
45c6:  3e40 0424      mov	#0x2404, r14
45ca:  0f4b           mov	r11, r15
45cc:  b012 5447      call	#0x4754 <strcpy>

Copies password into 43b5 (revealed by a break)

45d0:  0f4b           mov	r11, r15
45d2:  0e44           mov	r4, r14
45d4:  3e50 e8ff      add	#0xffe8, r14
45d8:  1e53           inc	r14
45da:  ce93 0000      tst.b	0x0(r14)
45de:  fc23           jnz	#0x45d8 <login+0x88>

Calculating size of the password by inc r14 by one for each byte beginning from 43b5 that is not 00.

Apparently

45e0:  0b4e           mov	r14, r11
45e2:  0b8f           sub	r15, r11
45e4:  5f44 e8ff      mov.b	-0x18(r4), r15
45e8:  8f11           sxt	r15
45ea:  0b9f           cmp	r15, r11
45ec:  0628           jnc	#0x45fa <login+0xaa>

Checks that the size of the password as found in r11 to be less than 16 bytes (refer to when the program moved 16 bytes into -0x18(r4))

45ee:  1f42 0024      mov	&0x2400, r15
45f2:  b012 2847      call	#0x4728 <puts>
45f6:  3040 4044      br	#0x4440 <__stop_progExec__>

Stops execution if it isn't

45fa:  5f44 e7ff      mov.b	-0x19(r4), r15
45fe:  8f11           sxt	r15
4600:  0b9f           cmp	r15, r11
4602:  062c           jc	#0x4610 <login+0xc0>

Checks that the size of the password as found in r11 to be greater than 8 bytes (refer to when the program moved 8 bytes into -0x19(r4))

4604:  1f42 0224      mov	&0x2402, r15
4608:  b012 2847      call	#0x4728 <puts>
460c:  3040 4044      br	#0x4440 <__stop_progExec__>

Stops execution if it isn't

4610:  c443 d4ff      mov.b	#0x0, -0x2c(r4)
4614:  3f40 d4ff      mov	#0xffd4, r15
4618:  0f54           add	r4, r15
461a:  0f12           push	r15
461c:  0f44           mov	r4, r15
461e:  3f50 e9ff      add	#0xffe9, r15
4622:  0f12           push	r15
4624:  3f50 edff      add	#0xffed, r15

initializing some registers

4628:  0f12           push	r15
462a:  3012 7d00      push	#0x7d
462e:  b012 c446      call	#0x46c4 <INT>

checking if pass is correct

4632:  3152           add	#0x8, sp
4634:  c493 d4ff      tst.b	-0x2c(r4)
4638:  0524           jz	#0x4644 <login+0xf4>

tests the flag set by the <INT>

463a:  b012 4a44      call	#0x444a <unlock_door>
463e:  3f40 2145      mov	#0x4521 "Access granted.", r15
4642:  023c           jmp	#0x4648 <login+0xf8>

Unlocks the door if flag is set

4644:  3f40 3145      mov	#0x4531 "That password is not correct.", r15
4648:  b012 2847      call	#0x4728 <puts>
464c:  c493 faff      tst.b	-0x6(r4)
4650:  0624           jz	#0x465e <login+0x10e>
4652:  1f42 0024      mov	&0x2400, r15
4656:  b012 2847      call	#0x4728 <puts>
465a:  3040 4044      br	#0x4440 <__stop_progExec__>

Stops execution if -0x6(r4) is not zero

465e:  3150 2800      add	#0x28, sp
4662:  3441           pop	r4
4664:  3b41           pop	r11
4666:  3041           ret

Breaking at 4666 reveals that sp is 43cc.
We are able to overflow this if we bypass the length checking of the password.
Note that the username is not actually checked.
The only way we reach ret is if we do not hit any execution stopping code.
Meaning that:
1) password must be between the size limits
2) -0x6(r4) is not 00

Note:
455c:  c443 faff      mov.b	#0x0, -0x6(r4)  ; 0
4560:  f442 e7ff      mov.b	#0x8, -0x19(r4) ; 8 (min pass size)
4564:  f440 1000 e8ff mov.b	#0x10, -0x18(r4)  ; 16 (max pass size)

r4 = 43cc
43c6 -> contains a flag we check at instruction 464c
43b3 -> contains the minimum size of the password
43b4 -> contains  the maximum size of the password

Username is stored at 43a2.
We can overflow the username to change the password size limits
This will allow us to overflow the password up until 43cc which is the ret address, and place the <unlock_door> function address which is 4a44.
Overflowing the password should also allow us to change the value of the flag at 43c6

username: 17 bytes of junk + min size + max size
password: 17 bytes of junk + 00
<strcpy> stops copying at 00 though..

Im better off entering the ret address with the username then rewriting 00 to the flag at 43c6 with the password.
Meaning:

username: 17 bytes of junk + min size + max size + 23 bytes of junk + 4a44

username: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0199aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4a44
password: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00

Door Unlocked.
