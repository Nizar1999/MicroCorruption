    LockIT Pro Hardware Security Module 1 stores the login password,
    ensuring users can not access the password through other means.
    The LockIT Pro can send the LockIT Pro HSM-1 a password, and the
    HSM will return if the password is correct by setting a flag in
    memory.

Reading the above snippet from the manual, we know that the password checking is going to occur in the HSM module instead this time.
The only thing we will be able to control is the password we enter which will be stored in the LockIT Pro's memory and a flag which will be set.
This smells awfully alot like a buffer overflow challenge.

Off to the code,
First 3 functions normal as last challenge.

Again we take the jump to <__do_clear_bss>

4424 <__do_clear_bss>
4424:  3f40 2200      mov	#0x22, r15
4428:  0f93           tst	r15
442a:  0624           jz	#0x4438 <main+0x0>
442c:  8245 5c01      mov	r5, &0x015c
4430:  1f83           dec	r15
4432:  cf43 0024      mov.b	#0x0, 0x2400(r15)
4436:  fa23           jnz	#0x442c <__do_clear_bss+0x8>

Storing 0x22 (16 in decimal) in r15 this time and nulling 16 bits beginning with 0x2400
Storing entered password here again.

4438 <main>
4438:  b012 2045      call	#0x4520 <login>
443c:  0f43           clr	r15

Main has a call to login and thats about it.
Let's inspect <login> further..

4520 <login>
4520:  c243 1024      mov.b	#0x0, &0x2410
4524:  3f40 7e44      mov	#0x447e "Enter the password to continue.", r15
4528:  b012 de45      call	#0x45de <puts>
452c:  3f40 9e44      mov	#0x449e "Remember: passwords are between 8 and 16 characters.", r15
4530:  b012 de45      call	#0x45de <puts>

Nothing interesting in the above snippet

4534:  3e40 1c00      mov	#0x1c, r14
4538:  3f40 0024      mov	#0x2400, r15
453c:  b012 ce45      call	#0x45ce <getsn>

Initializing r14 and r15 with values and calling the <getsn> function
Wonder what it does..

45ce <getsn>
45ce:  0e12           push	r14
45d0:  0f12           push	r15
45d2:  2312           push	#0x2
45d4:  b012 7a45      call	#0x457a <INT>
45d8:  3150 0600      add	#0x6, sp
45dc:  3041           ret

sending r14, r15, and 0x2 as arguments for <INT>
According to the manual:

INT 0x02.
The gets interrupt: read a specific number of bytes to standard input.
Takes two arguments. The first is the address to place the string, the
second is the maximum number of bytes to read. Null bytes are not handled
specially null-terminated.

So were just feeding the password into the address at r15 which is 0x2400, and were reading 0x1c bytes into it...interesting.
The module will read 22 bytes instead of 16.

Back to the code in <login>,

4540:  3f40 0024      mov	#0x2400, r15
4544:  b012 5444      call	#0x4454 <test_password_valid>
4548:  0f93           tst	r15
454a:  0324           jz	$+0x8
454c:  f240 1e00 1024 mov.b	#0x1e, &0x2410
4552:  3f40 d344      mov	#0x44d3 "Testing if password is valid.", r15
4556:  b012 de45      call	#0x45de <puts>
455a:  f290 4e00 1024 cmp.b	#0x4e, &0x2410
4560:  0720           jne	#0x4570 <login+0x50>
4562:  3f40 f144      mov	#0x44f1 "Access granted.", r15
4566:  b012 de45      call	#0x45de <puts>
456a:  b012 4844      call	#0x4448 <unlock_door>
456e:  3041           ret
4570:  3f40 0145      mov	#0x4501 "That password is not correct.", r15
4574:  b012 de45      call	#0x45de <puts>
4578:  3041           ret

Moving address of the password to r15. (4540)
Calling <test_password_valid> (4544)
If we are to reach 4562 we need to not take the jump at 4560 meaning that the byte comparision at 455a should be correct.
What this means is that the byte at 0x2410 needs to be 0x4e.
But that would mean that we need to enter it in the password as 0x4e and take the jump at 454c to avoid it getting overwritten.
Meaning that the code in <test_password_valid> needs to write 0 to r15.

Let's look more in depth at that function:

4454 <test_password_valid>
4454:  0412           push	r4
4456:  0441           mov	sp, r4
4458:  2453           incd	r4
445a:  2183           decd	sp
445c:  c443 fcff      mov.b	#0x0, -0x4(r4)
4460:  3e40 fcff      mov	#0xfffc, r14
4464:  0e54           add	r4, r14
4466:  0e12           push	r14
4468:  0f12           push	r15
446a:  3012 7d00      push	#0x7d
446e:  b012 7a45      call	#0x457a <INT>
4472:  5f44 fcff      mov.b	-0x4(r4), r15
4476:  8f11           sxt	r15
4478:  3152           add	#0x8, sp
447a:  3441           pop	r4
447c:  3041           ret

What immediately caught my eye while i was skimming the code was the <INT> call.
0x7d:
Interface with the HSM-1. Set a flag in memory if the password passed in is
correct.
Takes two arguments. The first argument is the password to test, the
second is the location of a flag to overwrite if the password is correct.

Bingo, r14 is the flag's location.
Well what is r14?
Time to set a break point and find out. (Break at 4466)
The value at r14 is 43f8
and the value of r4 is 43fc

We then move a value into r15 which is 43fc - 0x4 = 43f8
Wait a minute..that's r14!

so r15 is just going to contain the flag we set.
And if that flag is 0 then we're good to go.
That flag is 0 if the password is incorrect so I guess all we have to do now is enter a bunch of junk values followed by 0x4e at a certain point.

As I've mentioned before, the byte at 0x2410 needs to be 0x4e.
And the password begins at 0x2400, meaning that we need to enter 16 bytes of junk followed by 4e.
This is going to work since we can actually read more than 16 bytes into the buffer.

I decided id use python to generate that for me cause im too lazy
print(16 * 'aa', '4e', sep = '')

Just check hex now and enter aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4e
Door Unlocked.
