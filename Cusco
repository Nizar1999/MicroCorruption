 This is Software Revision 02. We have improved the security of the
    lock by  removing a conditional  flag that could  accidentally get
    set by passwords that were too long.
    
The flag was removed this time, but maybe it still reads more than 16 bytes.
Will have to check <getsn> again.

<main> has a call to <login>

Let's insepct <login>:

4500 <login>
4500:  3150 f0ff      add	#0xfff0, sp
4504:  3f40 7c44      mov	#0x447c "Enter the password to continue.", r15
4508:  b012 a645      call	#0x45a6 <puts>
450c:  3f40 9c44      mov	#0x449c "Remember: passwords are between 8 and 16 characters.", r15
4510:  b012 a645      call	#0x45a6 <puts>

Not interested in all the above.

4514:  3e40 3000      mov	#0x30, r14
4518:  0f41           mov	sp, r15
451a:  b012 9645      call	#0x4596 <getsn>

Moving 0x30 into r14 and sp into r15 and calling <getsn>

4596 <getsn>
4596:  0e12           push	r14
4598:  0f12           push	r15
459a:  2312           push	#0x2
459c:  b012 4245      call	#0x4542 <INT>
45a0:  3150 0600      add	#0x6, sp
45a4:  3041           ret

A quick look at <getsn> reveals two important things:
1) We're still reading more than 16 bytes from input.. 48 bytes to be exact.
2) The password is stored at the value in r15 which is 43ee (Breaking at the call to <getsn> reveals the value of r15)

With these two in mind, let's head back to <login>:

451e:  0f41           mov	sp, r15
4520:  b012 5244      call	#0x4452 <test_password_valid>
4524:  0f93           tst	r15
4526:  0524           jz	#0x4532 <login+0x32>
4528:  b012 4644      call	#0x4446 <unlock_door>
452c:  3f40 d144      mov	#0x44d1 "Access granted.", r15
4530:  023c           jmp	#0x4536 <login+0x36>
4532:  3f40 e144      mov	#0x44e1 "That password is not correct.", r15
4536:  b012 a645      call	#0x45a6 <puts>
453a:  3150 1000      add	#0x10, sp
453e:  3041           ret

To unlock the door, r15 needs to be different than 0.
Let's look at <test_password_valid>

4452 <test_password_valid>
4452:  0412           push	r4
4454:  0441           mov	sp, r4
4456:  2453           incd	r4
4458:  2183           decd	sp
445a:  c443 fcff      mov.b	#0x0, -0x4(r4)
445e:  3e40 fcff      mov	#0xfffc, r14
4462:  0e54           add	r4, r14
4464:  0e12           push	r14
4466:  0f12           push	r15
4468:  3012 7d00      push	#0x7d
446c:  b012 4245      call	#0x4542 <INT>
4470:  5f44 fcff      mov.b	-0x4(r4), r15
4474:  8f11           sxt	r15
4476:  3152           add	#0x8, sp
4478:  3441           pop	r4
447a:  3041           ret

Seems similar to last time, as r15 is going to contain the flag set by the <INT>.
Let's find out the address of r14 this time.
Break at 4464 and r14 is 43e8 and r4 is 43ec
Meaning that r15 is set to 43e8


So. Quick recap.
Flag is at 43e8
Password stored at 43ee
We can read 48 bytes of input to the 43ee.

We can't do anything in regards to corrupting the flag.

Let's just go back to <login> and see if there is anything else we might be able to do.

Interesting..:
453a:  3150 1000      add	#0x10, sp
453e:  3041           ret

Right before the return, were adding a value to sp.
So I decided to perform a break on it, and i noticed that the sp's value becomes 43fe after adding 0x10 to it, which is in the range of our buffer overflow.
Password starts at 43ee so were going to be entering 16 bytes of junk followed by an address we want the return statement to take us to which will be 4644 (the <unlock_door> function).
(For those who don't know ret returns us to whatever value the address sp is pointing at contains)
I used the following statement:
print(16 * 'aa', '4644', sep = '')
to generate this input:
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4644

Check hex, Enter aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4644
Door Unlocked.
